<?php

  final class bmDataObjectMap extends bmDataObject
  {
    
    public function __construct($aplication, $parameters = array())
    {
      
      $this->objectName = 'dataObjectMap';
      
      $this->map = array(
        'identifier' => array(
          'fieldName' => 'id',
          'dataType' => BM_VT_INTEGER,
          'defaultValue' => 0
        ),
        'name' => array(
          'fieldName' => 'name',
          'dataType' => BM_VT_STRING,
          'defaultValue' => ''
        ),
        'type' => array(
          'fieldName' => 'type',
          'dataType' => BM_VT_INTEGER,
          'defaultValue' => 0
        )
      );
      parent::__construct($aplication, $parameters);
      
    }
    
    public function __get($propertyName)
    {
      $this->checkDirty();
      switch ($propertyName)
      {
        case 'fieldIds':
          if (!array_key_exists('fieldIds', $this->properties))
          {
            $this->properties['fieldIds'] = $this->application->dataObjectMapCache->getFields($this, false);
          }
          return $this->properties['fieldIds'];
        break;
        case 'fields':
          return $this->application->dataObjectMapCache->getFields($this);
        break;
        default:
          return parent::__get($propertyName);
        break;
      }
    }
    
    public function addField($fieldId, $type)
    {
      $fieldIds = $this->fieldIds;
      
      if (!$this->itemExists($fieldId, 'dataObjectFieldId', $fieldIds))
      {
        $field = new stdClass();
        $field->dataObjectFieldId = $fieldId;
        $field->type = $type;
        $this->properties['fieldIds'][] = $field;
      }
      $this->dirty['saveFields'] = true;
    }
    
    public function deleteField($fieldId)
    {
      
    }
    
    protected function saveFields()
    {
      
      $dataLink = $this->application->dataLink;
      $cacheLink = $this->application->cacheLink;
      
      $sql = "DELETE FROM `link_dataObjectMap_dataObjectField` WHERE `dataObjectMapId` = " . $this->properties['identifier'] . ";";
      $dataLink->query($sql);
      
      foreach ($this->properties['fieldIds'] as $item)
      { 
        $insertStrings[] = "(" . $dataLink->formatInput($this->properties['identifier'], BM_VT_INTEGER) . ", " . $dataLink->formatInput($item->dataObjectFieldId, BM_VT_INTEGER) . ", " . $dataLink->formatInput($item->type, BM_VT_INTEGER) . ")";
      }
      
      if (count($insertStrings) > 0)
      {
        $sql = "INSERT IGNORE INTO
                  `link_dataObjectMap_dataObjectField`
                  (`dataObjectMapId`, `dataObjectFieldId`, `type`)
                VALUES
                  " . implode(', ', $insertStrings) . ";";
                  
        $dataLink->query($sql);
      }
      
      $cacheLink->delete('dataObjectMap_dataObjectFields_' . $this->properties['identifier']);
      $this->dirty['saveFields'] = false;
      
    }
    
    private function dataTypeToString($dataType)
    {
      $result = 'BM_VT_ANY';
      switch ($dataType)
      {
        case BM_VT_INTEGER:
          $result = 'BM_VT_INTEGER';
        break;
        case BM_VT_FLOAT:
          $result = 'BM_VT_FLOAT';
        break;
        case BM_VT_STRING:
          $result = 'BM_VT_STRING';
        break;
        case BM_VT_DATETIME:
          $result = 'BM_VT_DATETIME';
        break;
      }
      return $result;
    }
    
    public function toMapping()
    {
      $this->checkDirty();
      $fields = $this->fields;
      $mapping = "      /*AUTOGENERATED CODE START*/\n\n     \$this->objectName = '" . $this->properties['name'] . "';\n     \$this->map = array_merge(\$this->map, array(\n";
      $mappingItems = array();
      foreach($fields as $field)
      {
        $mappingItems[] = "        '" . $field->dataObjectField->propertyName . "' => array(\n          'fieldName' => '" . $field->dataObjectField->fieldName . "',\n          'dataType' => " . $this->dataTypeToString($field->dataObjectField->type) . ",\n          'defaultValue' => " . $field->dataObjectField->fefaultValue . "\n       )";
      }
      
      $mapping .= implode(",\n", $mappingItems) . "\n     ));\n\n     /*AUTOGENERATED CODE END*/";
      return $mapping;
    }
    
    private function getPropertyNameByFieldName($fieldName)
    {

      return $fieldName;
      
    }
    
    private function mysqlTypeToFFType($mysqlType)
    {
      if (mb_strpos($mysqlType, 'int') === 0)
      {
        $result = 'BM_VT_INTEGER';
      }
      elseif (mb_strpos($mysqlType, 'float') === 0)
      {
        $result = 'BM_VT_FLOAT';
      }
      elseif (mb_strpos($mysqlType, 'date') === 0)
      {
        $result = 'BM_VT_DATETIME';
      }
      elseif (mb_strpos($mysqlType, 'char') !== false)
      {
        $result = 'BM_VT_STRING';
      }
      elseif (mb_strpos($mysqlType, 'text') !== false)
      {
        $result = 'BM_VT_STRING';
      }
      else
      {
        $result = 'BM_VT_ANY';
      }
      return $result;
      
    }
    
    public function generateFields()
    {
      $qTableFields = $this->application->dataLink->select("DESCRIBE `" . $this->name . "`;");
      while ($tableField = $qTableFields->nextObject())
      {
        $tableField->Property = $this->getPropertyNameByFieldName($tableField->Field);
        $tableField->FFType = $this->mysqlTypeToFFType($tableField->Type);
        if ($tableField->Default === null)
        {
          switch ($tableField->FFType)
          {
            case 'BM_VT_INTEGER':
            case 'BM_VT_FLOAT':
              $tableField->FFDefault = 0;
            break;
            case 'BM_VT_STRING':
              $tableField->FFDefault = '';
            break;
            case 'BM_VT_DATETIME':
              $tableField->FFDefault = '0000-01-01 00:00:00';
            break;
            case 'BM_VT_ANY':
              $tableField->FFDefault = '';
            break;
          }
        }
        else
        {
          $tableField->FFDefault = $tableField->Default;
        }
        $dataField = new bmDataObjectField($this->application);
        if ($tableField->Property == 'id')
        {
          $tableField->Property = 'identifier';
        }
        $dataField->propertyName = $tableField->Property;
        $dataField->fieldName = $tableField->Field;
        $dataField->type = constant($tableField->FFType);
        $dataField->defaultValue = $tableField->FFDefault;
        $dataField->setDataObjectMap($this->properties['identifier'], 1);
        unset($dataField);
      }
    }
    
  }

?>