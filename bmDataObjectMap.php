<?php

  final class bmDataObjectMap extends bmDataObject
  {
    
    public function __construct($aplication, $parameters = array())
    {
      
      $this->objectName = 'dataObjectMap';
      
      $this->map = array(
        'identifier' => array(
          'fieldName' => 'id',
          'dataType' => BM_VT_INTEGER,
          'defaultValue' => 0
        ),
        'name' => array(
          'fieldName' => 'name',
          'dataType' => BM_VT_STRING,
          'defaultValue' => ''
        )
      );
      parent::__construct($aplication, $parameters);
      
    }
    
    public function __get($propertyName)
    {
      switch ($propertyName)
      {
        case 'fields':
          return $this->application->dataObjectMapCache->getFields($this);
        break;
        default:
          return parent::__get($propertyName);
        break;
      }
    }
    
    public function toMapping()
    {
      $this->checkDirty();
      $fields = $this->fields;
      $mapping = "      /*AUTOGENERATED CODE START*/\n\n     \$this->objectName = '" . $this->properties['name'] . "';\n     \$this->map = array_merge(\$this->map, array(\n";
      $mappingItems = array();
      foreach($fields as $field)
      {
        $mappingItems[] = "        '" . $field->Property . "' => array(\n          'fieldName' => '" . $field->Field . "',\n          'dataType' => " . $field->FFType . ",\n          'defaultValue' => " . $field->FFDefault . "\n       )";
      }
      //$dataField
      
      $mapping .= implode(",\n", $mappingItems) . "\n     ));\n\n     /*AUTOGENERATED CODE END*/";
      return $mapping;
    }
    
  }

?>